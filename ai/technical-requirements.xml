<architecture_overview>
FanForge is a <b>Next 14 / React 18 / TypeScript 5</b> web application deployed on Vercel with static exports for public pages.

The runtime stack is organised into four layers:

**1 · Edge & Routing**
- Vercel Edge Network serves static assets and SSR pages.
- <code>middleware.ts</code> resolves Supabase‑Auth JWT cookies and injects <code>{ userId, role }</code> into <code>request.nextUrl</code> for route guards.

**2 · Frontend App**
- Next.js App Router pages are grouped under <code>(auth)</code>, <code>(brand)</code>, and <code>(creator)</code> segments.
- Tailwind 3 + shadcn/ui components and Lucide icons drive UI.
- Forms use React Hook Form 7 with Zod 3 resolvers for schema‑driven validation.
- <b>Framer Motion 11</b> powers page‑level transitions, staggered element reveals, and interactive canvas effects. Shared animation variants live in <code>/lib/animation.ts</code> and respect user “prefers‑reduced‑motion”.  

**3 · API & Services**
- Next.js Route Handlers in <code>app/api/**</code> act as thin controllers.
- Domain logic lives in <code>/lib/services/*</code> and uses Drizzle ORM for Postgres access.
- Supabase Storage issues presigned URLs for asset uploads; Vercel Cron jobs handle email, cleanup, and metrics.

**4 · Data & Auth**
- Supabase Postgres 15 with Row‑Level Security.
- Drizzle ORM + drizzle‑kit manage schema & type‑safe SQL, following Supabase‑Drizzle guides.
- Supabase Auth issues JWT‑backed sessions (email/password & OAuth); cookies are <code>Secure</code>, <code>HttpOnly</code>, and auto‑rotated.

Cross‑cutting concerns—logging via Logflare, monitoring through Vercel Analytics, and immutable audit trails—are wired into the service layer.
</architecture_overview>

<user_types_and_permissions>
| Role | Scope | Permissions |
|------|-------|-------------|
| **Creator** | Self | View campaigns; create/edit own submissions; delete drafts; view personal analytics |
| **BrandAdmin** | Brand | CRUD campaigns & asset kits; invite BrandReviewer; review/approve/reject submissions; view brand analytics |
| **BrandReviewer** | Brand | Review/approve/reject submissions only |
| **PlatformAdmin** | Global | Full system access; manage users/brands; feature flags |

Implementation notes: roles are data‑driven (<code>roles</code>, <code>user_roles</code> join table). Permission slugs (e.g. <code>"campaign:create"</code>) allow new roles (Moderator, CreatorPro) without code changes. Both API layer (<code>assertPermission()</code>) and Postgres RLS enforce the same matrix.
</user_types_and_permissions>

<database_design>
Primary datastore: **Supabase Postgres** with Drizzle schema definitions and SQL migrations.

```ts
// db/schema.ts (excerpt)
export const users = pgTable('users', {
  id: uuid('id').primaryKey().defaultRandom(),
  email: text('email').notNull().unique(),
  passwordHash: text('password_hash'),
  displayName: text('display_name'),
  createdAt: timestamp('created_at').defaultNow(),
});

export const roles = pgTable('roles', {
  id: serial('id').primaryKey(),
  name: text('name').unique(),
});

export const userRoles = pgTable('user_roles', {
  userId: uuid('user_id').references(() => users.id),
  roleId: integer('role_id').references(() => roles.id),
  brandId: uuid('brand_id').references(() => brands.id).nullable(),
});
```

Other core tables (`brands`, `campaigns`, `asset_kits`, `submissions`, `audit_logs`) follow similar patterns; large binaries are stored in Supabase Storage.  
`drizzle-kit generate` produces SQL migration files under <code>drizzle/migrations/</code>, applied by CI with <code>supabase db push</code>.  
Indexed columns on <code>(campaign_id, status)</code> and TSVector fields back campaign discovery & search.
</database_design>

<technology_stack>
**Runtime & Frameworks**

| Layer | Package | Version |
|-------|---------|---------|
| React | <code>react</code>, <code>react-dom</code> | 18.2.0 |
| Next.js | <code>next</code> | 14.0.0 |
| TypeScript | <code>typescript</code> | 5.0.0 (5.2.0&nbsp;rec.) |
| Node.js | — | ≥18.17.0 (20.9.0&nbsp;rec.) |
| Styling | <code>tailwindcss</code> 3.3 + <code>tailwindcss-animate</code> | — |
| UI Kit | <code>shadcn/ui</code> | latest |
| Icons | <code>lucide-react</code> | 0.294.0 |
| Forms | <code>react-hook-form</code> 7.47.0 + <code>@hookform/resolvers</code> | — |
| Validation | <code>zod</code> 3.22.0 | — |
| Animations | <code>framer-motion</code> | 11.x |
| ORM | <code>drizzle-orm</code> 0.44.2 + <code>drizzle-kit</code> 0.31.1 | — |
| DB Driver | <code>postgres</code> 3.4.7 | — |
| Supabase SSR | <code>@supabase/ssr</code> 0.6.1 | — |

**Tooling & Quality**  
ESLint 8.52 · Prettier 3 · Husky 8 · Jest 29 · TypeScript‑ESLint 6.

**Scripts**

```jsonc
{
  "dev": "next dev",
  "build": "next build",
  "export": "next export",
  "type-check": "tsc --noEmit",
  "lint": "next lint",
  "test": "jest"
}
```
</technology_stack>

<development_workflow>
1. **Bootstrap**

```bash
npx create-next-app fanforge --ts
cd fanforge && npm install framer-motion
```

2. **Configure Supabase & Drizzle**
- Add `DATABASE_URL`, `SUPABASE_URL`, `SUPABASE_ANON_KEY` to `.env.local`.
- Create `drizzle.config.ts`; run `npx drizzle-kit introspect`.
- Push migrations with `supabase db push`.

3. **Daily Work**
- `npm run dev` for local server with HMR.
- Pre‑commit hooks (Husky) run `lint` and `type-check`.
- PRs must pass Jest tests and Drizzle migration diff in CI.

4. **Deploy**
- Vercel Git integration. `next build && next export` emit static assets + serverless API routes.
- Environment variables managed via Vercel Secrets.

5. **Version Targets** – see <architecture_overview>.
</development_workflow>

<technical_constraints>
- **Performance Budgets:** FCP <1.5 s, LCP <2.5 s, CLS <0.1, FID <100 ms.  
- **Browser Support:** Chrome 90+, Firefox 88+, Safari 14+, Edge 90+.  
- **Responsive Breakpoints:** 320–767 px (mobile), 768–1023 px (tablet), ≥1024 px (desktop).  
- **Accessibility:** WCAG 2.1 AA; all interactive elements keyboard‑navigable; ARIA roles & labels mandatory; Framer Motion respects reduced‑motion.
</technical_constraints>

<file_structure>
.
├── app
│   ├── (auth)/login/page.tsx
│   ├── (auth)/register/page.tsx
│   ├── (brand)/campaigns/[id]/{campaign-detail-client.tsx,page.tsx}
│   ├── (brand)/dashboard/page.tsx
│   ├── (brand)/submissions/page.tsx
│   ├── (creator)/create/page.tsx
│   ├── (creator)/discover/[id]/{campaign-discover-client.tsx,page.tsx}
│   ├── (creator)/portfolio/page.tsx
│   ├── api/{auth,campaigns,submissions}/…
│   ├── globals.css
│   └── layout.tsx
├── components
│   ├── canvas/creation-canvas.tsx
│   ├── shared/navigation.tsx
│   ├── ui/{badge.tsx,button.tsx,card.tsx,input.tsx}
│   └── motion/{fade.tsx,stagger.tsx}   // Framer Motion helpers
├── db/{schema.ts,index.ts}
├── drizzle.config.ts
├── lib/{mock-data.ts,utils.ts,validations.ts}
├── utils/supabase/{client.ts,middleware.ts,server.ts}
└── …
</file_structure>

<environment_configuration>
```bash
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:3000/api
NEXT_PUBLIC_SUPABASE_URL=<project>.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=<anon-key>
DATABASE_URL=postgres://...
NODE_ENV=development
```

```js
// next.config.js
const nextConfig = {
  output: 'export',
  trailingSlash: true,
  images: { unoptimized: true },
};
module.exports = nextConfig;
```
</environment_configuration>

<security_and_performance_optimization>
**Authentication & RBAC**  
- Supabase Auth issues JWTs; cookies: <code>Secure</code>, <code>HttpOnly</code>, <code>SameSite=Lax</code>.  
- Postgres RLS mirrors API checks for least‑privilege access.

**Validation & Sanitisation**  
- Zod validates all inputs; file uploads limited to ≤25 MB & verified MIME types.

**Content Security**  
- CSP headers via <code>@supabase/ssr</code>: <code>script-src 'self' supabase.co vercel.app</code>; <code>object-src 'none'</code>.  
- CSRF tokens on all mutating forms.

**Performance**  
- Route‑level code splitting via App Router; heavy components `dynamic()`‑imported.  
- Next.js `Image` optimises responsive media; Tailwind purges unused CSS.  
- `Cache-Control: s-maxage=0, stale-while-revalidate=60` on API responses.

**Monitoring & Logging**  
- Vercel Web Vitals, Supabase Logflare, and <code>audit_logs</code> table feed observability dashboards.
</security_and_performance_optimization>

<key_decisions_and_rationale>
Adding **Framer Motion** delivers polished transitions with minimal bundle overhead (tree‑shakeable, SSR‑compatible). LazyMotion and feature flags respect reduced‑motion for accessibility.

Drizzle + Supabase stays for type‑safe SQL & native Postgres features.  
Next 14 App Router + static export keeps hosting predictable while serverless API routes serve dynamic needs.  
Data‑driven RBAC + Postgres RLS & audit logs satisfy brand/creator legal obligations.  
Strict tooling (ESLint, Prettier, Husky, Jest) ensures code health and guards migrations.  
Overall, the architecture remains **secure, performant, accessible, and visually engaging**, with room for future extensions (on‑chain licensing, payments, AI asset tools) without rework.
</key_decisions_and_rationale>
