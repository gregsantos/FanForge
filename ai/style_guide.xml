<?xml version="1.0" encoding="UTF-8"?>
<style-guide name="FanForge" version="1.0" date="2025-06-13" approach="utility-first" framework="tailwind" animation="framer-motion">
  <metadata>
    <purpose>Define visual language, interaction rules, and code conventions for agentic coding systems generating FanForge screens and components</purpose>
    <audience>AI agents, developers, designers</audience>
    <goals>
      <goal>Ship cohesive, beautiful UI that feels lively yet professional</goal>
      <goal>Encode accessibility and performance best-practices by default</goal>
      <goal>Leverage Framer Motion for subtle, polished animation without compromising user preference or CLS</goal>
    </goals>
    <compliance>Agents must treat every section as a spec—deviations require explicit override</compliance>
  </metadata>

  <instructions>
    <instruction priority="high">Use modern, semantic HTML and accessible ARIA practices</instruction>
    <instruction priority="high">For animations, use Framer Motion and ensure smooth, performant transitions</instruction>
    <instruction priority="high">For interactivity, implement all described behaviors (hover, click, scroll-triggered effects) using best practices</instruction>
    <instruction priority="medium">Ensure design is visually stunning, with harmonious color palettes, typography, and spacing</instruction>
    <instruction priority="medium">Make output responsive for mobile, tablet, and desktop</instruction>
    <instruction priority="low">Include comments in code to explain key sections</instruction>
  </instructions>

  <animation-guidelines framework="framer-motion">
    <duration-tokens>
      <duration name="fast" value="0.15" unit="seconds" use="Button hover" />
      <duration name="base" value="0.25" unit="seconds" use="Fade/slide in" />
      <duration name="slow" value="0.45" unit="seconds" use="Modals, page transitions" />
    </duration-tokens>

    <easing-tokens>
      <easing name="default" value="[0.4, 0, 0.2, 1]" use="Most motions" />
    </easing-tokens>

    <stagger-tokens>
      <stagger name="children" value="0.05" unit="seconds" use="Lists/Grids" />
    </stagger-tokens>

    <variants-library>
      <variant name="fadeSlide">
        <code><![CDATA[
// lib/animation.ts
export const fadeSlide = {
  hidden: { opacity: 0, y: 12 },
  show: { opacity: 1, y: 0, transition: { duration: 0.25, ease: 'easeOut' } },
};
        ]]></code>
      </variant>

      <variant name="stagger">
        <code><![CDATA[
export const stagger = {
  show: { transition: { staggerChildren: 0.05 } },
};
        ]]></code>
      </variant>
    </variants-library>

    <best-practices>
      <practice priority="critical" title="Respect user preference">
        <description>Always check for reduced motion preference</description>
        <code><![CDATA[
const reduced = useReducedMotion();
const animate = reduced ? false : 'show';
        ]]></code>
      </practice>

      <practice priority="high" title="Avoid layout shift">
        <description>Use layout prop and position: relative</description>
      </practice>

      <practice priority="high" title="No blocking animations">
        <description>Keep main thread free (< 16ms)</description>
      </practice>
    </best-practices>
  </animation-guidelines>

  <interaction-patterns>
    <state name="hover">
      <visual-cue>4% surface tint, cursor pointer</visual-cue>
      <accessibility>role="button"</accessibility>
      <implementation>hover:bg-accent/40 cursor-pointer</implementation>
    </state>

    <state name="focus">
      <visual-cue>2px outline using primary color</visual-cue>
      <accessibility>tabindex="0"</accessibility>
      <implementation>focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2</implementation>
    </state>

    <state name="disabled">
      <visual-cue>40% opacity, no shadow</visual-cue>
      <accessibility>aria-disabled="true"</accessibility>
      <implementation>disabled:opacity-40 disabled:shadow-none disabled:pointer-events-none</implementation>
    </state>

    <error-messaging>
      <pattern>Inline under field + toast summary</pattern>
      <accessibility>role="alert"</accessibility>
      <implementation>aria-live="assertive" for immediate errors, aria-live="polite" for form validation</implementation>
    </error-messaging>
  </interaction-patterns>

  <accessibility-checklist>
    <requirement priority="critical" category="color">
      <description>Color contrast ≥ 4.5:1 for text, 3:1 for icons</description>
      <validation>Use contrast checking tools, test with high contrast mode</validation>
    </requirement>

    <requirement priority="critical" category="keyboard">
      <description>All interactive elements reachable via Tab key</description>
      <validation>Test keyboard-only navigation</validation>
    </requirement>

    <requirement priority="high" category="motion">
      <description>Motion preference respected</description>
      <implementation>useReducedMotion() hook implementation required</implementation>
    </requirement>

    <requirement priority="high" category="forms">
      <description>Form fields labelled with htmlFor</description>
      <implementation>&lt;label htmlFor="fieldId"&gt;</implementation>
    </requirement>

    <requirement priority="medium" category="announcements">
      <description>Live regions use polite announcements</description>
      <implementation>aria-live="polite" for status updates</implementation>
    </requirement>
  </accessibility-checklist>

  <theming dark-mode="true">
    <theme-switching>
      <method>data-theme="dark" on &lt;html&gt;</method>
      <token-swapping>Automatic via CSS variables</token-swapping>
    </theme-switching>

    <media-handling>
      <images>Provide dark variant when needed</images>
      <illustrations>Provide dark variant when needed</illustrations>
    </media-handling>

    <implementation>
      <code><![CDATA[
// Theme switching implementation
const [theme, setTheme] = useState('light');

useEffect(() => {
  document.documentElement.setAttribute('data-theme', theme);
}, [theme]);
      ]]></code>
    </implementation>
  </theming>

  <code-conventions>
    <naming-conventions>
      <convention element="components" pattern="PascalCase" example="Button.tsx" description="File and export names" />
      <convention element="hooks" pattern="camelCase" prefix="use" example="useTheme" />
      <convention element="tests" pattern="colocate" example="Button.test.tsx" />
      <convention element="assets" pattern="kebab-case" prefix="campaign-" example="campaign-hero-image.png" />
    </naming-conventions>

    <file-organization>
      <location element="motion-variants" path="lib/animation.ts" />
      <location element="utility-functions" path="lib/utils.ts" />
      <location element="components" path="components/" />
      <location element="hooks" path="hooks/" />
    </file-organization>

    <styling-utilities>
      <utility name="class-composition" library="clsx + tailwind-merge" />
      <requirement>Always export Storybook CSF story for future integration</requirement>
    </styling-utilities>

    <example-component>
      <code><![CDATA[
import { motion } from 'framer-motion';
import { fadeSlide } from '@/lib/animation';
import { cn } from '@/lib/utils';

interface CampaignCardProps {
  children: React.ReactNode;
  className?: string;
}

export function CampaignCard({ children, className }: CampaignCardProps) {
  return (
    <motion.article
      variants={fadeSlide}
      initial="hidden"
      whileInView="show"
      viewport={{ once: true, amount: 0.4 }}
      className={cn(
        "bg-card border border-border rounded-lg shadow-sm p-6 transition-shadow hover:shadow-lg",
        className
      )}
    >
      {children}
    </motion.article>
  );
}

// Storybook story export
export default {
  title: 'Components/CampaignCard',
  component: CampaignCard,
};
      ]]></code>
    </example-component>
  </code-conventions>

  <asset-guidelines>
    <icons>
      <library>Lucide React</library>
      <size>24 × 24 px</size>
      <stroke-width>1.5</stroke-width>
      <implementation>import { IconName } from 'lucide-react'</implementation>
    </icons>

    <images>
      <formats>Optimized SVG/PNG</formats>
      <max-size>200 KB</max-size>
      <naming>kebab-case, campaign images prefixed with campaign-</naming>
    </images>

    <optimization>
      <requirement>Use next/image for automatic optimization</requirement>
      <requirement>Provide appropriate alt text for all images</requirement>
      <requirement>Use lazy loading for non-critical images</requirement>
    </optimization>
  </asset-guidelines>

  <design-token-mapping>
    <color-mappings>
      <mapping figma="$primary-500" tailwind="bg-primary" css-var="hsl(var(--primary))" />
      <mapping figma="$secondary-500" tailwind="bg-secondary" css-var="hsl(var(--secondary))" />
      <mapping figma="$neutral-100" tailwind="bg-neutral-100" css-var="hsl(var(--muted))" />
      <mapping figma="$success" tailwind="bg-green-500" css-var="hsl(142 76% 36%)" />
      <mapping figma="$warning" tailwind="bg-yellow-500" css-var="hsl(45 93% 47%)" />
      <mapping figma="$error" tailwind="bg-destructive" css-var="hsl(var(--destructive))" />
    </color-mappings>

    <spacing-mappings>
      <mapping figma="$space-xs" tailwind="p-1" value="0.25rem" />
      <mapping figma="$space-sm" tailwind="p-2" value="0.5rem" />
      <mapping figma="$space-md" tailwind="p-4" value="1rem" />
      <mapping figma="$space-lg" tailwind="p-6" value="1.5rem" />
      <mapping figma="$space-xl" tailwind="p-8" value="2rem" />
    </spacing-mappings>

    <radius-mappings>
      <mapping figma="$radius-sm" tailwind="rounded-sm" css-var="calc(var(--radius) - 4px)" />
      <mapping figma="$radius-md" tailwind="rounded-md" css-var="calc(var(--radius) - 2px)" />
      <mapping figma="$radius-lg" tailwind="rounded-lg" css-var="var(--radius)" />
      <mapping figma="$radius-xl" tailwind="rounded-xl" value="0.75rem" />
    </radius-mappings>

    <shadow-mappings>
      <mapping figma="$shadow-sm" tailwind="shadow-sm" value="0 1px 2px 0 rgb(0 0 0 / 0.05)" />
      <mapping figma="$shadow-md" tailwind="shadow-md" value="0 4px 6px -1px rgb(0 0 0 / 0.1)" />
      <mapping figma="$shadow-lg" tailwind="shadow-lg" value="0 10px 15px -3px rgb(0 0 0 / 0.1)" />
    </shadow-mappings>
  </design-token-mapping>

  <responsive-design>
    <breakpoints framework="tailwind">
      <breakpoint name="sm" value="640px" usage="Small tablets" />
      <breakpoint name="md" value="768px" usage="Large tablets" />
      <breakpoint name="lg" value="1024px" usage="Laptops" />
      <breakpoint name="xl" value="1280px" usage="Desktops" />
      <breakpoint name="2xl" value="1536px" usage="Large desktops" />
    </breakpoints>

    <mobile-first>
      <principle>Design for mobile first, enhance for larger screens</principle>
      <implementation>Use min-width breakpoints (sm:, md:, lg:)</implementation>
    </mobile-first>

    <touch-targets>
      <minimum-size>44px × 44px (11 × 11 Tailwind units)</minimum-size>
      <implementation>min-h-11 min-w-11 for interactive elements</implementation>
    </touch-targets>
  </responsive-design>

  <performance-guidelines>
    <animation-performance>
      <principle>Use transform and opacity for animations</principle>
      <avoid>Animating layout properties (width, height, top, left)</avoid>
      <implementation>Use Framer Motion's layout prop for layout animations</implementation>
    </animation-performance>

    <image-optimization>
      <principle>Use next/image with appropriate sizing</principle>
      <lazy-loading>Implement for below-the-fold images</lazy-loading>
      <formats>Prefer WebP with fallbacks</formats>
    </image-optimization>

    <bundle-optimization>
      <principle>Tree-shake unused utilities and components</principle>
      <implementation>Use dynamic imports for heavy components</implementation>
    </bundle-optimization>
  </performance-guidelines>

  <validation-rules>
    <color-contrast>
      <minimum-ratio>4.5:1 for normal text</minimum-ratio>
      <minimum-ratio-large>3:1 for large text (18px+ or 14px+ bold)</minimum-ratio-large>
      <tools>Use WebAIM Contrast Checker or similar</tools>
    </color-contrast>

    <motion-testing>
      <requirement>Test with prefers-reduced-motion enabled</requirement>
      <requirement>Ensure animations don't cause seizures (max 3 flashes per second)</requirement>
    </motion-testing>

    <keyboard-navigation>
      <requirement>All interactive elements must be keyboard accessible</requirement>
      <requirement>Focus indicators must be visible and clear</requirement>
      <requirement>Tab order must be logical</requirement>
    </keyboard-navigation>
  </validation-rules>
</style-guide>